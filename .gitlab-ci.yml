# Copyright (C) 2023  Christian Berger

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Which Docker image shall be used on the GitLab runner?
image: ubuntu:latest

# Details about how to connect to the Docker service to run this build.
variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""

services:
  - docker:19.03.3-dind

stages:
  - build       # stage is executed for each push (irrespective of branch), not release
  - test
  - deploy      # stage is executed -
  - plot        # if new release,
                  # if previous process (build) succeeded,
                  # release is versioned correctly in the form vX.X.X

# This section describes what shall be done to build and test the project.
build:
  tags:
    - docker-build
  stage: build
  rules:
    - exists:
        - Dockerfile
    - if: $CI_COMMIT_BRANCH || $CI_COMMIT_TAG
  before_script:
  - apt-get update
  - apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
  - echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
  - apt-get update
  - apt-get install -y docker-ce docker-ce-cli containerd.io gnuplot

  script:
  #  - cd src
    - docker build -f Dockerfile .

# this part uses lcov to generate coverage report of executed unit tests. 
coverage:
  tags:
    - docker-build
  stage: test
  needs: ["build"]
  before_script:
    - export DEBIAN_FRONTEND=noninteractive
    - export TZ=Europe/London
    - apt-get -qq update && apt-get -qq install -y lcov g++
    - apt-get install -y python3-pip 
    - pip3 install gcovr==6.0 
    
  script:
    - cd src
    - g++ -fprofile-arcs -ftest-coverage -o test_algorithm test_algorithm.cpp data_handler/data_handler.cpp test/performance_tests.cpp  --coverage
    - ./test_algorithm
    - gcov *.cpp 
    - lcov --capture --directory . --output-file coverage.info
    - lcov --remove coverage.info '/usr/*' --output-file coverage.info
    - gcovr --html-details --html-syntax-highlighting -o coverage.html
    - lcov --list coverage.info

  artifacts:
    paths:
    - src/coverage.html


# This section describes what shall be done to deploy artefacts from the project.
release:
# Display information before we start the build.
  rules:
    - if: $CI_PIPELINE_SOURCE == 'schedule'
      when: always
    - if: $CI_COMMIT_TAG
  image: docker:latest
  services:
    - docker:stable-dind
  tags:
    - docker-build
  needs: ["build"]
  allow_failure: true
  stage: deploy
  before_script:
    - CI_COMMIT_TAG=$CI_COMMIT_TAG ./regex-check.sh
  script:
  #  - cd src
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx create --name platformbuilder --use
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx inspect --bootstrap
    - DOCKER_CLI_EXPERIMENTAL=enabled docker buildx build --platform "linux/amd64,linux/arm64,linux/arm/v7" -t "$CI_REGISTRY_IMAGE":"$CI_COMMIT_TAG" --push --provenance=false .

plot:
  image: ubuntu:latest
  tags:
    - docker-build
  needs:
    - job: build 
  allow_failure: true
  stage: plot
  before_script:
    - apt-get update 
    - apt install -qq -y gnuplot git
  script:
    - cd src
    - cd scripts
    - ls
    - git checkout $CI_COMMIT_BRANCH && git pull
    - |-
        for i in {1..5} 
        do 
          git show HEAD~1:src/algorithm_output/Output${i}_SteeringAngle.csv > old_output${i}.csv
          chmod +xrw old_output${i}.csv
        done	
    - gnuplot gnuscript.txt
  artifacts:
    paths:
      - src/scripts/graph1.png
      - src/scripts/graph2.png
      - src/scripts/graph3.png
      - src/scripts/graph4.png
      - src/scripts/graph5.png
